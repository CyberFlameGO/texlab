name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
env:
  CARGO_INCREMENTAL: 0
  CI: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10
jobs:
  server:
    name: Server (${{ matrix.artifact.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact:
              name: texlab-x86_64-linux
              path: target/debug/texlab
          - os: windows-latest
            artifact:
              name: texlab-x86_64-windows
              path: target/debug/texlab.exe
          - os: macos-latest
            artifact:
              name: texlab-x86_64-macos
              path: target/debug/texlab
          - os: macos-latest
            artifact:
              name: texlab-aarch64-macos
              path: target/aarch64-apple-darwin/debug/texlab
            target: aarch64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          target: ${{ matrix.target }}
      - name: Compile
        if: ${{ matrix.target == null }}
        run: cargo test --all-features --no-run --locked
      - name: Compile (Cross)
        if: ${{ matrix.target != null }}
        run: cargo test --all-features --no-run --locked --target ${{ matrix.target }}
      - name: Test
        if: ${{ matrix.target == null }}
        run: cargo test --all-features -- --nocapture --quiet
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact.name }}
          path: ${{ matrix.artifact.path }}
          retention-days: 3

  client_code:
    name: Client (Code, ${{ matrix.target }})
    needs: [server]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            artifact: texlab-x86_64-linux
            test: true
          - os: ubuntu-latest
            target: linux-arm64
          - os: ubuntu-latest
            target: linux-armhf
          - os: ubuntu-latest
            target: alpine-x64
          - os: windows-latest
            target: win32-x64
            artifact: texlab-x86_64-windows
            test: true
          - os: windows-latest
            target: win32-ia32
          - os: windows-latest
            target: alpine-arm64
          - os: macos-latest
            target: darwin-x64
            artifact: texlab-x86_64-macos
            test: true
          - os: macos-latest
            target: darwin-arm64
            artifact: texlab-aarch64-macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
      - name: Install dependencies
        run: npm ci
        working-directory: editors/code
      - name: Download server
        uses: actions/download-artifact@v3
        id: download
        if: ${{ matrix.artifact != null }}
        with:
          name: ${{ matrix.artifact }}
      - name: Move server to directory (Windows)
        if: ${{ matrix.artifact != null && startsWith(matrix.target, 'win32') }}
        run: Move-Item -Path ${{ format('{0}/texlab.exe', steps.download.outputs.download-path) }} -Destination editors/code/server/texlab.exe
      - name: Move server to directory (Unix)
        if: ${{ matrix.artifact != null && !startsWith(matrix.target, 'win32') }}
        run: mv ${{ format('{0}/texlab', steps.download.outputs.download-path) }} editors/code/server/texlab
      - name: Test (Linux)
        run: xvfb-run -a npm test
        if: ${{ matrix.test && runner.os == 'Linux' }}
        working-directory: editors/code
      - name: Test (Windows / macOS)
        run: npm test
        if: ${{ matrix.test && runner.os != 'Linux' }}
        working-directory: editors/code

  msrv:
    name: MSRV
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: ./.github/actions/install-rust
      - name: Install cargo-msrv
        run: cargo install cargo-msrv --no-default-features
      - name: Verify MSRV
        run: cargo msrv --verify

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: ./.github/actions/install-rust
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
